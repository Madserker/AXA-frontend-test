// @codepen
define(["require", "exports", "tslib", "react", "office-ui-fabric-react/lib/Utilities", "office-ui-fabric-react/lib/Button", "office-ui-fabric-react/lib/DetailsList", "office-ui-fabric-react/lib/Toggle", "office-ui-fabric-react/lib/Styling"], function (require, exports, tslib_1, React, Utilities_1, Button_1, DetailsList_1, Toggle_1, Styling_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var margin = '0 20px 20px 0';
    var controlWrapperClass = Styling_1.mergeStyles({
        display: 'flex',
        alignItems: 'center',
        flexWrap: 'wrap'
    });
    var toggleStyles = {
        label: { display: 'inline-block', marginLeft: '10px', marginBottom: '3px' },
        root: { display: 'flex', flexDirection: 'row-reverse', alignItems: 'center', margin: margin }
    };
    var _columns = [
        {
            key: 'name',
            name: 'Name',
            fieldName: 'name',
            minWidth: 100,
            maxWidth: 200,
            isResizable: true
        },
        {
            key: 'color',
            name: 'Color',
            fieldName: 'color',
            minWidth: 100,
            maxWidth: 200
        }
    ];
    // NOTE: If changing these, also change the initial definition of state.groups below
    var _initialRedIndex = 0;
    var _initialRedCount = 2;
    var _initialGreenIndex = 2;
    var _initialGreenCount = 0;
    var _initialBlueIndex = 2;
    var _initialBlueCount = 3;
    var _items = [
        {
            key: 'a',
            name: 'a',
            color: 'red'
        },
        {
            key: 'b',
            name: 'b',
            color: 'red'
        },
        {
            key: 'c',
            name: 'c',
            color: 'blue'
        },
        {
            key: 'd',
            name: 'd',
            color: 'blue'
        },
        {
            key: 'e',
            name: 'e',
            color: 'blue'
        }
    ];
    var _blueGroupIndex = 2;
    var DetailsListGroupedExample = /** @class */ (function (_super) {
        tslib_1.__extends(DetailsListGroupedExample, _super);
        function DetailsListGroupedExample(props) {
            var _this = _super.call(this, props) || this;
            _this._root = React.createRef();
            _this._addItem = function () {
                var items = _this.state.items;
                var groups = _this.state.groups.slice();
                groups[_blueGroupIndex].count++;
                _this.setState({
                    items: items.concat([
                        {
                            key: 'item-' + items.length,
                            name: 'New item ' + items.length,
                            color: 'blue'
                        }
                    ]),
                    groups: groups
                }, function () {
                    if (_this._root.current) {
                        _this._root.current.focusIndex(items.length, true);
                    }
                });
            };
            _this._onShowItemIndexInViewChanged = function (event, checked) {
                _this.setState({ showItemIndexInView: checked });
            };
            _this._onChangeCompactMode = function (ev, checked) {
                _this.setState({ isCompactMode: checked });
            };
            _this.state = {
                items: _items,
                // This is based on the definition of _items
                groups: [
                    {
                        key: 'groupred0',
                        name: 'Color: "red"',
                        startIndex: _initialRedIndex,
                        count: _initialRedCount
                    },
                    {
                        key: 'groupgreen2',
                        name: 'Color: "green"',
                        startIndex: _initialGreenIndex,
                        count: _initialGreenCount
                    },
                    {
                        key: 'groupblue2',
                        name: 'Color: "blue"',
                        startIndex: _initialBlueIndex,
                        count: _initialBlueCount
                    }
                ],
                showItemIndexInView: false,
                isCompactMode: false
            };
            return _this;
        }
        DetailsListGroupedExample.prototype.componentWillUnmount = function () {
            if (this.state.showItemIndexInView) {
                var itemIndexInView = this._root.current.getStartItemIndexInView();
                alert('first item index that was in view: ' + itemIndexInView);
            }
        };
        DetailsListGroupedExample.prototype.render = function () {
            var _a = this.state, items = _a.items, groups = _a.groups, isCompactMode = _a.isCompactMode;
            return (React.createElement("div", null,
                React.createElement("div", { className: controlWrapperClass },
                    React.createElement(Button_1.DefaultButton, { onClick: this._addItem, text: "Add an item", styles: { root: { margin: margin } } }),
                    React.createElement(Toggle_1.Toggle, { label: "Compact mode", checked: isCompactMode, onChange: this._onChangeCompactMode, styles: toggleStyles }),
                    React.createElement(Toggle_1.Toggle, { label: "Show index of first item in view when unmounting", checked: this.state.showItemIndexInView, onChange: this._onShowItemIndexInViewChanged, styles: toggleStyles })),
                React.createElement(DetailsList_1.DetailsList, { componentRef: this._root, items: items, groups: groups, columns: _columns, ariaLabelForSelectAllCheckbox: "Toggle selection for all items", ariaLabelForSelectionColumn: "Toggle selection", groupProps: {
                        showEmptyGroups: true
                    }, onRenderItemColumn: this._onRenderColumn, compact: isCompactMode })));
        };
        DetailsListGroupedExample.prototype._onRenderColumn = function (item, index, column) {
            var value = item && column && column.fieldName ? item[column.fieldName] || '' : '';
            return React.createElement("div", { "data-is-focusable": true }, value);
        };
        return DetailsListGroupedExample;
    }(Utilities_1.BaseComponent));
    exports.DetailsListGroupedExample = DetailsListGroupedExample;
});
//# sourceMappingURL=DetailsList.Grouped.Example.js.map