{"ast":null,"code":"import { resolve } from \"react-resolve\";\nvar api = \"https://raw.githubusercontent.com/rrafols/mobile_test/master/data.json\";\nexport function fetchGnomes() {\n  return function (dispatch) {\n    fetch(api).then(function (res) {\n      return res.json();\n    }).then(function (gnomes) {\n      return dispatch({\n        type: \"FETCH_GNOMES\",\n        payload: gnomes.Brastlewark\n      });\n    });\n  };\n}\nexport function getGnomeInfo(id) {\n  return function (dispatch) {\n    fetch(api).then(function (res) {\n      return res.json();\n    }).then(function (json) {\n      return json.Brastlewark;\n    }).then(function (gnomes) {\n      return gnomes.map(function (gnome) {\n        if (gnome.id == id) {\n          console.log(gnome);\n          dispatch({\n            type: \"GET_GNOME\",\n            payload: gnome\n          });\n          resolve();\n        }\n      });\n    });\n  };\n}\nexport function fetchGnomesFilters(hairFilters, professionFilters, gnomes) {\n  return function (dispatch) {\n    fetchGnomesHairFilters(hairFilters, gnomes).then(function (gnomesf) {\n      return fetchGnomesProfessionFilters(professionFilters, gnomesf);\n    });\n    Promise.all(promises).then(function () {\n      dispatch({\n        type: \"FETCH_GNOMES\",\n        payload: gnomesFiltered\n      });\n    });\n  };\n} //SEARCH FILTERS ACTIONS=================================================\n//Se puede aplicar mas de un filtro a la vez,\n//Por eso necesitamos aplicar estos filtros a la lista que tenemos en state de store\n//tambien ordenamos la lista que retornamos de los filtros, y no la lista original\n\nexport function fetchGnomesHairFilters(hairFilters, gnomes) {\n  return function (dispatch) {\n    var gnomesFiltered = [];\n    var promises = hairFilters.map(function (hair) {\n      return filterByHairColor(hair, gnomes).then(function (gnomes) {\n        return gnomes.map(function (gnome) {\n          gnomesFiltered.push(gnome);\n        });\n      });\n    });\n    Promise.all(promises).then(function () {\n      dispatch({\n        type: \"FETCH_GNOMES\",\n        payload: gnomesFiltered\n      });\n    });\n  };\n}\nexport function fetchGnomesProfessionFilters(professionFilters, gnomes) {\n  return function (dispatch) {\n    var gnomesFiltered = [];\n    var promises = professionFilters.map(function (profession) {\n      return filterByProfession(profession, gnomes).then(function (gnomes) {\n        return gnomes.map(function (gnome) {\n          gnomesFiltered.push(gnome);\n        });\n      });\n    });\n    Promise.all(promises).then(function () {\n      dispatch({\n        type: \"FETCH_GNOMES\",\n        payload: gnomesFiltered\n      });\n    });\n  };\n} //SEARCH FILTERS FUNCTIONS=================================================\n\nfunction filterByHairColor(hairColor, gnomes) {\n  var gnomesFiltered = [];\n  gnomes.map(function (gnome) {\n    if (gnome.hair_color === hairColor) {\n      console.log(\"agua\");\n      gnomesFiltered.push(gnome);\n    }\n  });\n  return new Promise(function (resolve, reject) {\n    resolve(gnomesFiltered);\n  });\n}\n\nfunction filterByProfession(profession, gnomes) {\n  var gnomesFiltered = [];\n  gnomes.map(function (gnome) {\n    if (profession in gnome.professions) {\n      console.log(\"agua\");\n      gnomesFiltered.push(gnome);\n    }\n  });\n  return new Promise(function (resolve, reject) {\n    resolve(gnomesFiltered);\n  });\n} //SEARCH SORT==============================================================================","map":{"version":3,"sources":["C:\\Users\\sergi.hurtado\\Desktop\\GnomesRedux\\redux-cra\\src\\js\\actions\\getActions.js"],"names":["resolve","api","fetchGnomes","dispatch","fetch","then","res","json","gnomes","type","payload","Brastlewark","getGnomeInfo","id","map","gnome","console","log","fetchGnomesFilters","hairFilters","professionFilters","fetchGnomesHairFilters","gnomesf","fetchGnomesProfessionFilters","Promise","all","promises","gnomesFiltered","hair","filterByHairColor","push","profession","filterByProfession","hairColor","hair_color","reject","professions"],"mappings":"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","sourcesContent":["import {resolve} from \"react-resolve\"\r\nvar api = \"https://raw.githubusercontent.com/rrafols/mobile_test/master/data.json\";\r\n\r\nexport function fetchGnomes(){\r\n    return function(dispatch){\r\n        fetch(api)\r\n        .then(res => res.json())\r\n        .then(gnomes =>\r\n            dispatch({\r\n                type:\"FETCH_GNOMES\",\r\n                payload: gnomes.Brastlewark\r\n            }));\r\n    }\r\n}\r\n\r\nexport function getGnomeInfo(id){\r\n    return function(dispatch){\r\n        fetch(api)\r\n        .then(res => res.json())\r\n        .then(json => json.Brastlewark)\r\n        .then(gnomes=> gnomes.map((gnome) => {\r\n            if(gnome.id==id){\r\n                console.log(gnome);\r\n                dispatch({\r\n                    type:\"GET_GNOME\",\r\n                    payload: gnome\r\n                })\r\n                resolve()\r\n            }\r\n        }))\r\n    }\r\n}\r\n\r\n\r\nexport function fetchGnomesFilters(hairFilters,professionFilters,gnomes){\r\n    return function(dispatch){   \r\n        fetchGnomesHairFilters(hairFilters,gnomes).then(\r\n            gnomesf => fetchGnomesProfessionFilters(professionFilters, gnomesf)\r\n        )\r\n        Promise.all(promises).then(() => {\r\n            dispatch({\r\n                type:\"FETCH_GNOMES\",\r\n                payload: gnomesFiltered\r\n            })\r\n        });    \r\n    }\r\n}\r\n\r\n//SEARCH FILTERS ACTIONS=================================================\r\n//Se puede aplicar mas de un filtro a la vez,\r\n//Por eso necesitamos aplicar estos filtros a la lista que tenemos en state de store\r\n//tambien ordenamos la lista que retornamos de los filtros, y no la lista original\r\nexport function fetchGnomesHairFilters(hairFilters,gnomes){\r\n    return function(dispatch){    \r\n        var gnomesFiltered = [];        \r\n        const promises = hairFilters.map(hair=>\r\n            filterByHairColor(hair,gnomes)\r\n            .then(gnomes => gnomes.map(\r\n                gnome=>{gnomesFiltered.push(gnome)}\r\n            )));\r\n        Promise.all(promises).then(() => {\r\n            dispatch({\r\n                type:\"FETCH_GNOMES\",\r\n                payload: gnomesFiltered\r\n            })\r\n        });      \r\n    }\r\n}\r\n\r\nexport function fetchGnomesProfessionFilters(professionFilters,gnomes){\r\n    return function(dispatch){    \r\n        var gnomesFiltered = [];        \r\n        const promises = professionFilters.map(profession=>\r\n            filterByProfession(profession,gnomes)\r\n            .then(gnomes => gnomes.map(\r\n                gnome=>{gnomesFiltered.push(gnome)}\r\n            )));\r\n        Promise.all(promises).then(() => {\r\n            dispatch({\r\n                type:\"FETCH_GNOMES\",\r\n                payload: gnomesFiltered\r\n            })\r\n        });      \r\n    }\r\n}\r\n\r\n//SEARCH FILTERS FUNCTIONS=================================================\r\nfunction filterByHairColor(hairColor, gnomes){\r\n    \r\n    var gnomesFiltered = [];\r\n\r\n    gnomes.map((gnome =>{\r\n        if(gnome.hair_color === hairColor){\r\n            console.log(\"agua\")\r\n            gnomesFiltered.push(gnome);\r\n        }\r\n    }));\r\n\r\n    return new Promise((resolve, reject) => {resolve(gnomesFiltered);});\r\n    \r\n}\r\n\r\nfunction filterByProfession(profession, gnomes){\r\n    \r\n    var gnomesFiltered = [];\r\n\r\n    gnomes.map((gnome =>{\r\n        if(profession in gnome.professions){\r\n            console.log(\"agua\")\r\n            gnomesFiltered.push(gnome);\r\n        }\r\n    }));\r\n\r\n    return new Promise((resolve, reject) => {resolve(gnomesFiltered);});\r\n    \r\n}\r\n\r\n//SEARCH SORT=============================================================================="]},"metadata":{},"sourceType":"module"}