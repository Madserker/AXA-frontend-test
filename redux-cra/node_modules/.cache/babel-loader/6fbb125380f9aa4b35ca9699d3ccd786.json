{"ast":null,"code":"var api = \"https://raw.githubusercontent.com/rrafols/mobile_test/master/data.json\";\nexport function fetchGnomes() {\n  return function (dispatch) {\n    fetch(api).then(function (res) {\n      return res.json();\n    }).then(function (gnomes) {\n      return dispatch({\n        type: \"FETCH_GNOMES\",\n        payload: gnomes.Brastlewark\n      });\n    });\n  };\n}\nexport function getGnomeInfo(id) {\n  return function (dispatch) {\n    fetch(api).then(function (res) {\n      return res.json();\n    }).then(function (json) {\n      return json.Brastlewark;\n    }).then(function (gnomes) {\n      return gnomes.map(function (gnome) {\n        if (gnome.id === id) {\n          console.log(gnome);\n          dispatch({\n            type: \"GET_GNOME\",\n            payload: gnome\n          });\n        }\n      });\n    });\n  };\n} //SEARCH FILTERS ACTIONS=================================================\n//Se puede aplicar mas de un filtro a la vez,\n//Por eso necesitamos aplicar estos filtros a la lista que tenemos en state de store\n//tambien ordenamos la lista que retornamos de los filtros, y no la lista original\n\nexport function fetchGnomesFilters() {\n  return function (dispatch) {\n    fetch(api).then(function (res) {\n      return res.json();\n    }).then(function (gnomes) {\n      return filterByHairColor(\"Pink\", gnomes.Brastlewark);\n    }).then(function (gnomes) {\n      return dispatch({\n        type: \"FETCH_GNOMES\",\n        payload: gnomes\n      });\n    });\n  };\n} //SEARCH FILTERS FUNCTIONS=================================================\n\nfunction filterByHairColor(hairColor, gnomes) {\n  var gnomesFiltered = [];\n  gnomes.map(function (gnome) {\n    if (gnome.hair_color === hairColor) {\n      gnomesFiltered.push(gnome);\n    }\n  });\n  return gnomesFiltered;\n} //SEARCH SORT==============================================================================","map":{"version":3,"sources":["C:\\Users\\sergi.hurtado\\Desktop\\GnomesRedux\\redux-cra\\src\\js\\actions\\getActions.js"],"names":["api","fetchGnomes","dispatch","fetch","then","res","json","gnomes","type","payload","Brastlewark","getGnomeInfo","id","map","gnome","console","log","fetchGnomesFilters","filterByHairColor","hairColor","gnomesFiltered","hair_color","push"],"mappings":"AAAA,IAAIA,GAAG,GAAG,wEAAV;AAEA,OAAO,SAASC,WAAT,GAAsB;AACzB,SAAO,UAASC,QAAT,EAAkB;AACrBC,IAAAA,KAAK,CAACH,GAAD,CAAL,CACCI,IADD,CACM,UAAAC,GAAG;AAAA,aAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,KADT,EAECF,IAFD,CAEM,UAAAG,MAAM;AAAA,aACRL,QAAQ,CAAC;AACLM,QAAAA,IAAI,EAAC,cADA;AAELC,QAAAA,OAAO,EAAEF,MAAM,CAACG;AAFX,OAAD,CADA;AAAA,KAFZ;AAOH,GARD;AASH;AAED,OAAO,SAASC,YAAT,CAAsBC,EAAtB,EAAyB;AAC5B,SAAO,UAASV,QAAT,EAAkB;AACrBC,IAAAA,KAAK,CAACH,GAAD,CAAL,CACCI,IADD,CACM,UAAAC,GAAG;AAAA,aAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,KADT,EAECF,IAFD,CAEM,UAAAE,IAAI;AAAA,aAAIA,IAAI,CAACI,WAAT;AAAA,KAFV,EAGCN,IAHD,CAGM,UAAAG,MAAM;AAAA,aAAGA,MAAM,CAACM,GAAP,CAAW,UAACC,KAAD,EAAW;AAGjC,YAAGA,KAAK,CAACF,EAAN,KAAWA,EAAd,EAAiB;AACbG,UAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACAZ,UAAAA,QAAQ,CAAC;AACLM,YAAAA,IAAI,EAAC,WADA;AAELC,YAAAA,OAAO,EAAEK;AAFJ,WAAD,CAAR;AAIH;AACJ,OAVc,CAAH;AAAA,KAHZ;AAcH,GAfD;AAgBH,C,CAGD;AACA;AACA;AACA;;AACA,OAAO,SAASG,kBAAT,GAA6B;AAChC,SAAO,UAASf,QAAT,EAAkB;AACrBC,IAAAA,KAAK,CAACH,GAAD,CAAL,CACCI,IADD,CACM,UAAAC,GAAG;AAAA,aAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,KADT,EAECF,IAFD,CAEM,UAAAG,MAAM;AAAA,aAAIW,iBAAiB,CAAC,MAAD,EAAQX,MAAM,CAACG,WAAf,CAArB;AAAA,KAFZ,EAGCN,IAHD,CAGM,UAAAG,MAAM;AAAA,aACRL,QAAQ,CAAC;AACLM,QAAAA,IAAI,EAAC,cADA;AAELC,QAAAA,OAAO,EAAEF;AAFJ,OAAD,CADA;AAAA,KAHZ;AAQP,GATG;AAUH,C,CAED;;AACA,SAASW,iBAAT,CAA2BC,SAA3B,EAAsCZ,MAAtC,EAA6C;AACzC,MAAIa,cAAc,GAAG,EAArB;AAEAb,EAAAA,MAAM,CAACM,GAAP,CAAY,UAAAC,KAAK,EAAG;AAChB,QAAGA,KAAK,CAACO,UAAN,KAAqBF,SAAxB,EAAkC;AAC9BC,MAAAA,cAAc,CAACE,IAAf,CAAoBR,KAApB;AACH;AACJ,GAJD;AAMA,SAAOM,cAAP;AACH,C,CAED","sourcesContent":["var api = \"https://raw.githubusercontent.com/rrafols/mobile_test/master/data.json\";\r\n\r\nexport function fetchGnomes(){\r\n    return function(dispatch){\r\n        fetch(api)\r\n        .then(res => res.json())\r\n        .then(gnomes =>\r\n            dispatch({\r\n                type:\"FETCH_GNOMES\",\r\n                payload: gnomes.Brastlewark\r\n            }));\r\n    }\r\n}\r\n\r\nexport function getGnomeInfo(id){\r\n    return function(dispatch){\r\n        fetch(api)\r\n        .then(res => res.json())\r\n        .then(json => json.Brastlewark)\r\n        .then(gnomes=> gnomes.map((gnome) => {\r\n\r\n\r\n            if(gnome.id===id){\r\n                console.log(gnome);\r\n                dispatch({\r\n                    type:\"GET_GNOME\",\r\n                    payload: gnome\r\n                })\r\n            }\r\n        }))\r\n    }\r\n}\r\n\r\n\r\n//SEARCH FILTERS ACTIONS=================================================\r\n//Se puede aplicar mas de un filtro a la vez,\r\n//Por eso necesitamos aplicar estos filtros a la lista que tenemos en state de store\r\n//tambien ordenamos la lista que retornamos de los filtros, y no la lista original\r\nexport function fetchGnomesFilters(){\r\n    return function(dispatch){\r\n        fetch(api)\r\n        .then(res => res.json())\r\n        .then(gnomes => filterByHairColor(\"Pink\",gnomes.Brastlewark))\r\n        .then(gnomes =>\r\n            dispatch({\r\n                type:\"FETCH_GNOMES\",\r\n                payload: gnomes\r\n            }));\r\n}\r\n}\r\n\r\n//SEARCH FILTERS FUNCTIONS=================================================\r\nfunction filterByHairColor(hairColor, gnomes){\r\n    var gnomesFiltered = [];\r\n\r\n    gnomes.map((gnome =>{\r\n        if(gnome.hair_color === hairColor){\r\n            gnomesFiltered.push(gnome);\r\n        }\r\n    }));\r\n\r\n    return gnomesFiltered;\r\n}\r\n\r\n//SEARCH SORT=============================================================================="]},"metadata":{},"sourceType":"module"}