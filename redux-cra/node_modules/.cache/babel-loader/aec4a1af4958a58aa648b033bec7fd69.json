{"ast":null,"code":"import { resolve } from \"react-resolve\";\nvar api = \"https://raw.githubusercontent.com/rrafols/mobile_test/master/data.json\";\nexport function fetchGnomes() {\n  return function (dispatch) {\n    fetch(api).then(function (res) {\n      return res.json();\n    }).then(function (gnomes) {\n      return dispatch({\n        type: \"FETCH_GNOMES\",\n        payload: gnomes.Brastlewark\n      });\n    });\n  };\n}\nexport function getGnomeInfo(id) {\n  return function (dispatch) {\n    fetch(api).then(function (res) {\n      return res.json();\n    }).then(function (json) {\n      return json.Brastlewark;\n    }).then(function (gnomes) {\n      return gnomes.map(function (gnome) {\n        if (gnome.id == id) {\n          console.log(gnome);\n          dispatch({\n            type: \"GET_GNOME\",\n            payload: gnome\n          });\n          resolve();\n        }\n      });\n    });\n  };\n}\nexport function fetchGnomesFilters(hairFilters, professionFilters, gnomes) {\n  return function (dispatch) {\n    fetchGnomesHairFilters(hairFilters, gnomes).then(function (gnomesf) {\n      fetchGnomesProfessionFilters(professionFilters, gnomesf).then(function (gnomesff) {\n        return dispatch({\n          type: \"FETCH_GNOMES\",\n          payload: gnomesff\n        });\n      });\n    });\n  };\n} //SEARCH FILTERS ACTIONS=================================================\n//Se puede aplicar mas de un filtro a la vez,\n//Por eso necesitamos aplicar estos filtros a la lista que tenemos en state de store\n//tambien ordenamos la lista que retornamos de los filtros, y no la lista original\n\nfunction fetchGnomesHairFilters(hairFilters, gnomes) {\n  return new Promise(function (resolve, reject) {\n    var gnomesFiltered = [];\n    var promises = hairFilters.map(function (hair) {\n      return filterByHairColor(hair, gnomes).then(function (gnomes) {\n        return gnomes.map(function (gnome) {\n          gnomesFiltered.push(gnome);\n        });\n      });\n    });\n    resolve(gnomesFiltered);\n  });\n}\n\nfunction fetchGnomesProfessionFilters(professionFilters, gnomes) {\n  return new Promise(function (resolve, reject) {\n    var gnomesFiltered = [];\n    var promises = professionFilters.map(function (profession) {\n      return filterByProfession(profession, gnomes).then(function (gnomes) {\n        return gnomes.map(function (gnome) {\n          gnomesFiltered.push(gnome);\n        });\n      });\n    });\n    resolve(gnomesFiltered); // dispatch({\n    //     type:\"FETCH_GNOMES\",\n    //     payload: gnomesFiltered\n    // })\n  });\n} //SEARCH FILTERS FUNCTIONS=================================================\n\n\nfunction filterByHairColor(hairColor, gnomes) {\n  return new Promise(function (resolve, reject) {\n    var gnomesFiltered = [];\n    gnomes.map(function (gnome) {\n      if (gnome.hair_color === hairColor) {\n        console.log(\"water\");\n        gnomesFiltered.push(gnome);\n      }\n    });\n    resolve(gnomesFiltered);\n  });\n}\n\nfunction filterByProfession(profession, gnomes) {\n  return new Promise(function (resolve, reject) {\n    var gnomesFiltered = [];\n    gnomes.map(function (gnome) {\n      gnome.profession.map(function (profession) {\n        if (profession in gnome.professions) {\n          console.log(\"wind\");\n          gnomesFiltered.push(gnome);\n        }\n      });\n    });\n    resolve(gnomesFiltered);\n  });\n} //SEARCH SORT==============================================================================","map":{"version":3,"sources":["C:\\Users\\sergi.hurtado\\Desktop\\GnomesRedux\\redux-cra\\src\\js\\actions\\getActions.js"],"names":["resolve","api","fetchGnomes","dispatch","fetch","then","res","json","gnomes","type","payload","Brastlewark","getGnomeInfo","id","map","gnome","console","log","fetchGnomesFilters","hairFilters","professionFilters","fetchGnomesHairFilters","gnomesf","fetchGnomesProfessionFilters","gnomesff","Promise","reject","gnomesFiltered","promises","hair","filterByHairColor","push","profession","filterByProfession","hairColor","hair_color","professions"],"mappings":"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","sourcesContent":["import {resolve} from \"react-resolve\"\r\nvar api = \"https://raw.githubusercontent.com/rrafols/mobile_test/master/data.json\";\r\n\r\nexport function fetchGnomes(){\r\n    return function(dispatch){\r\n        fetch(api)\r\n        .then(res => res.json())\r\n        .then(gnomes =>\r\n            dispatch({\r\n                type:\"FETCH_GNOMES\",\r\n                payload: gnomes.Brastlewark\r\n            }));\r\n    }\r\n}\r\n\r\nexport function getGnomeInfo(id){\r\n    return function(dispatch){\r\n        fetch(api)\r\n        .then(res => res.json())\r\n        .then(json => json.Brastlewark)\r\n        .then(gnomes=> gnomes.map((gnome) => {\r\n            if(gnome.id==id){\r\n                console.log(gnome);\r\n                dispatch({\r\n                    type:\"GET_GNOME\",\r\n                    payload: gnome\r\n                })\r\n                resolve()\r\n            }\r\n        }))\r\n    }\r\n}\r\n\r\n\r\nexport function fetchGnomesFilters(hairFilters,professionFilters,gnomes){\r\n    return function(dispatch){   \r\n        fetchGnomesHairFilters(hairFilters,gnomes).then(\r\n            gnomesf => {\r\n                fetchGnomesProfessionFilters(professionFilters, gnomesf).then(\r\n                    gnomesff=>\r\n                        dispatch({\r\n                            type:\"FETCH_GNOMES\",\r\n                            payload: gnomesff\r\n                        })\r\n                    )\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\n//SEARCH FILTERS ACTIONS=================================================\r\n//Se puede aplicar mas de un filtro a la vez,\r\n//Por eso necesitamos aplicar estos filtros a la lista que tenemos en state de store\r\n//tambien ordenamos la lista que retornamos de los filtros, y no la lista original\r\nfunction fetchGnomesHairFilters(hairFilters,gnomes){   \r\n    return new Promise(function (resolve, reject){ \r\n        var gnomesFiltered = [];        \r\n        const promises = hairFilters.map(hair=>\r\n            filterByHairColor(hair,gnomes)\r\n            .then(gnomes => gnomes.map(gnome=>{gnomesFiltered.push(gnome)})));\r\n         resolve(gnomesFiltered);\r\n        });\r\n    }\r\n\r\nfunction fetchGnomesProfessionFilters(professionFilters,gnomes){   \r\n    return new Promise(function (resolve, reject){  \r\n        var gnomesFiltered = [];        \r\n        const promises = professionFilters.map(profession=>\r\n            filterByProfession(profession,gnomes)\r\n            .then(gnomes => gnomes.map(\r\n                gnome=>{gnomesFiltered.push(gnome)}\r\n            )));\r\n        resolve(gnomesFiltered);\r\n            // dispatch({\r\n            //     type:\"FETCH_GNOMES\",\r\n            //     payload: gnomesFiltered\r\n            // })\r\n        });      \r\n    \r\n}\r\n\r\n//SEARCH FILTERS FUNCTIONS=================================================\r\nfunction filterByHairColor(hairColor, gnomes){\r\n    return new Promise(function(resolve, reject){\r\n        var gnomesFiltered = [];\r\n\r\n        gnomes.map((gnome =>{\r\n            if(gnome.hair_color === hairColor){\r\n                console.log(\"water\")\r\n                gnomesFiltered.push(gnome);\r\n            }\r\n        }));\r\n\r\n         resolve(gnomesFiltered);\r\n    });\r\n}\r\n\r\nfunction filterByProfession(profession, gnomes){\r\n    return new Promise(function(resolve, reject){\r\n    var gnomesFiltered = [];\r\n\r\n    gnomes.map((gnome =>{\r\n        gnome.profession.map(profession => {\r\n            if(profession in gnome.professions){\r\n                console.log(\"wind\")\r\n                gnomesFiltered.push(gnome);\r\n            }\r\n        }\r\n\r\n            )\r\n\r\n\r\n    }));\r\n\r\n     resolve(gnomesFiltered);\r\n});\r\n    \r\n}\r\n\r\n//SEARCH SORT=============================================================================="]},"metadata":{},"sourceType":"module"}