{"ast":null,"code":"import { resolve } from \"react-resolve\";\nvar api = \"https://raw.githubusercontent.com/rrafols/mobile_test/master/data.json\";\nexport function fetchGnomes() {\n  return function (dispatch) {\n    fetch(api).then(function (res) {\n      return res.json();\n    }).then(function (gnomes) {\n      return dispatch({\n        type: \"FETCH_GNOMES\",\n        payload: gnomes.Brastlewark\n      });\n    });\n  };\n}\nexport function getGnomeInfo(id) {\n  return function (dispatch) {\n    fetch(api).then(function (res) {\n      return res.json();\n    }).then(function (json) {\n      return json.Brastlewark;\n    }).then(function (gnomes) {\n      return gnomes.map(function (gnome) {\n        if (gnome.id == id) {\n          console.log(gnome);\n          dispatch({\n            type: \"GET_GNOME\",\n            payload: gnome\n          });\n          resolve();\n        }\n      });\n    });\n  };\n}\nexport function fetchGnomesFilters(hairFilters, professionFilters, age, gnomes) {\n  return function (dispatch) {\n    fetchGnomesHairFilters(hairFilters, gnomes).then(function (gnomesf) {\n      fetchGnomesProfessionFilters(professionFilters, gnomesf).then(function (gnomesff) {\n        fetchGnomesAgeFilters(age, gnomesff).then(dispatch({\n          type: \"FETCH_GNOMES_FILTERS\",\n          payload: gnomesff\n        }));\n      });\n    });\n  };\n}\nexport function search(input, gnomes) {\n  return function (dispatch) {\n    console.log(input);\n    searchGnomes(input, gnomes).then(function (gnomesf) {\n      dispatch({\n        type: \"FETCH_GNOMES_FILTERS\",\n        payload: gnomesf\n      });\n    });\n  };\n} //SEARCH FILTERS ACTIONS=================================================\n//Se puede aplicar mas de un filtro a la vez,\n//Por eso necesitamos aplicar estos filtros a la lista que tenemos en state de store\n//tambien ordenamos la lista que retornamos de los filtros, y no la lista original\n\nfunction fetchGnomesHairFilters(hairFilters, gnomes) {\n  if (hairFilters.length == 0) {\n    return new Promise(function (resolve, reject) {\n      resolve(gnomes);\n    });\n  }\n\n  return new Promise(function (resolve, reject) {\n    var gnomesFiltered = [];\n    var promises = hairFilters.map(function (hair) {\n      return filterByHairColor(hair, gnomes).then(function (gnomes) {\n        return gnomes.map(function (gnome) {\n          gnomesFiltered.push(gnome);\n        });\n      });\n    });\n    resolve(gnomesFiltered);\n  });\n}\n\nfunction fetchGnomesProfessionFilters(professionFilters, gnomes) {\n  if (professionFilters.length == 0) {\n    return new Promise(function (resolve, reject) {\n      resolve(gnomes);\n    });\n  }\n\n  return new Promise(function (resolve, reject) {\n    var gnomesFiltered = [];\n    var promises = professionFilters.map(function (profession) {\n      return filterByProfession(profession, gnomes).then(function (gnomes) {\n        return gnomes.map(function (gnome) {\n          gnomesFiltered.push(gnome);\n        });\n      });\n    });\n    resolve(gnomesFiltered); // dispatch({\n    //     type:\"FETCH_GNOMES\",\n    //     payload: gnomesFiltered\n    // })\n  });\n}\n\nfunction fetchGnomesAgeFilters(age, gnomes) {\n  return new Promise(function (resolve, reject) {\n    var gnomesFiltered = [];\n    gnomes.map(function (gnome) {\n      if (gnome.age > age) {\n        gnomesFiltered.push(gnome);\n      }\n    });\n    resolve(gnomesFiltered);\n  });\n} //SEARCH FILTERS FUNCTIONS=================================================\n\n\nfunction filterByHairColor(hairColor, gnomes) {\n  return new Promise(function (resolve, reject) {\n    var gnomesFiltered = [];\n    gnomes.map(function (gnome) {\n      if (gnome.hair_color === hairColor) {\n        console.log(\"water\");\n        gnomesFiltered.push(gnome);\n      }\n    });\n    resolve(gnomesFiltered);\n  });\n}\n\nfunction filterByProfession(profession, gnomes) {\n  return new Promise(function (resolve, reject) {\n    var gnomesFiltered = [];\n    gnomes.map(function (gnome) {\n      gnome.professions.map(function (professionG) {\n        if (professionG == profession) {\n          console.log(\"wind\");\n          gnomesFiltered.push(gnome);\n        }\n      });\n    });\n    resolve(gnomesFiltered);\n  });\n}\n\nfunction searchGnomes(input, gnomes) {\n  return new Promise(function (resolve, reject) {\n    var gnomesFiltered = [];\n    gnomes.map(function (gnome) {\n      if (gnome.name.includes(input)) {\n        gnomesFiltered.push(gnome);\n      }\n    });\n    resolve(gnomesFiltered);\n  });\n} //SEARCH SORT==============================================================================","map":{"version":3,"sources":["C:\\Users\\sergi.hurtado\\Desktop\\GnomesRedux\\redux-cra\\src\\js\\actions\\getActions.js"],"names":["resolve","api","fetchGnomes","dispatch","fetch","then","res","json","gnomes","type","payload","Brastlewark","getGnomeInfo","id","map","gnome","console","log","fetchGnomesFilters","hairFilters","professionFilters","age","fetchGnomesHairFilters","gnomesf","fetchGnomesProfessionFilters","gnomesff","fetchGnomesAgeFilters","search","input","searchGnomes","length","Promise","reject","gnomesFiltered","promises","hair","filterByHairColor","push","profession","filterByProfession","hairColor","hair_color","professions","professionG","name","includes"],"mappings":"AAAA,SAAQA,OAAR,QAAsB,eAAtB;AACA,IAAIC,GAAG,GAAG,wEAAV;AAEA,OAAO,SAASC,WAAT,GAAsB;AACzB,SAAO,UAASC,QAAT,EAAkB;AACrBC,IAAAA,KAAK,CAACH,GAAD,CAAL,CACCI,IADD,CACM,UAAAC,GAAG;AAAA,aAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,KADT,EAECF,IAFD,CAEM,UAAAG,MAAM;AAAA,aACRL,QAAQ,CAAC;AACLM,QAAAA,IAAI,EAAC,cADA;AAELC,QAAAA,OAAO,EAAEF,MAAM,CAACG;AAFX,OAAD,CADA;AAAA,KAFZ;AAOH,GARD;AASH;AAED,OAAO,SAASC,YAAT,CAAsBC,EAAtB,EAAyB;AAC5B,SAAO,UAASV,QAAT,EAAkB;AACrBC,IAAAA,KAAK,CAACH,GAAD,CAAL,CACCI,IADD,CACM,UAAAC,GAAG;AAAA,aAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,KADT,EAECF,IAFD,CAEM,UAAAE,IAAI;AAAA,aAAIA,IAAI,CAACI,WAAT;AAAA,KAFV,EAGCN,IAHD,CAGM,UAAAG,MAAM;AAAA,aAAGA,MAAM,CAACM,GAAP,CAAW,UAACC,KAAD,EAAW;AACjC,YAAGA,KAAK,CAACF,EAAN,IAAUA,EAAb,EAAgB;AACZG,UAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACAZ,UAAAA,QAAQ,CAAC;AACLM,YAAAA,IAAI,EAAC,WADA;AAELC,YAAAA,OAAO,EAAEK;AAFJ,WAAD,CAAR;AAIAf,UAAAA,OAAO;AACV;AACJ,OATc,CAAH;AAAA,KAHZ;AAaH,GAdD;AAeH;AAGD,OAAO,SAASkB,kBAAT,CAA4BC,WAA5B,EAAwCC,iBAAxC,EAA0DC,GAA1D,EAA8Db,MAA9D,EAAqE;AACxE,SAAO,UAASL,QAAT,EAAkB;AACrBmB,IAAAA,sBAAsB,CAACH,WAAD,EAAaX,MAAb,CAAtB,CAA2CH,IAA3C,CACI,UAAAkB,OAAO,EAAI;AACPC,MAAAA,4BAA4B,CAACJ,iBAAD,EAAoBG,OAApB,CAA5B,CAAyDlB,IAAzD,CACI,UAAAoB,QAAQ,EAAE;AACNC,QAAAA,qBAAqB,CAACL,GAAD,EAAKI,QAAL,CAArB,CAAoCpB,IAApC,CACIF,QAAQ,CAAC;AACLM,UAAAA,IAAI,EAAC,sBADA;AAELC,UAAAA,OAAO,EAAEe;AAFJ,SAAD,CADZ;AAOH,OATL;AAYH,KAdL;AAgBH,GAjBD;AAkBH;AAED,OAAO,SAASE,MAAT,CAAgBC,KAAhB,EAAsBpB,MAAtB,EAA6B;AAChC,SAAO,UAASL,QAAT,EAAkB;AACrBa,IAAAA,OAAO,CAACC,GAAR,CAAYW,KAAZ;AACAC,IAAAA,YAAY,CAACD,KAAD,EAAOpB,MAAP,CAAZ,CAA2BH,IAA3B,CACI,UAAAkB,OAAO,EAAE;AACLpB,MAAAA,QAAQ,CAAC;AACLM,QAAAA,IAAI,EAAC,sBADA;AAELC,QAAAA,OAAO,EAAEa;AAFJ,OAAD,CAAR;AAIH,KANL;AAQH,GAVD;AAWH,C,CAID;AACA;AACA;AACA;;AACA,SAASD,sBAAT,CAAgCH,WAAhC,EAA4CX,MAA5C,EAAmD;AAC/C,MAAGW,WAAW,CAACW,MAAZ,IAAoB,CAAvB,EAAyB;AAAC,WAAO,IAAIC,OAAJ,CAAY,UAAS/B,OAAT,EAAiBgC,MAAjB,EAAwB;AAAChC,MAAAA,OAAO,CAACQ,MAAD,CAAP;AAAgB,KAArD,CAAP;AAA8D;;AACxF,SAAO,IAAIuB,OAAJ,CAAY,UAAU/B,OAAV,EAAmBgC,MAAnB,EAA0B;AACzC,QAAIC,cAAc,GAAG,EAArB;AACA,QAAMC,QAAQ,GAAGf,WAAW,CAACL,GAAZ,CAAgB,UAAAqB,IAAI;AAAA,aACjCC,iBAAiB,CAACD,IAAD,EAAM3B,MAAN,CAAjB,CACCH,IADD,CACM,UAAAG,MAAM;AAAA,eAAIA,MAAM,CAACM,GAAP,CAAW,UAAAC,KAAK,EAAE;AAACkB,UAAAA,cAAc,CAACI,IAAf,CAAoBtB,KAApB;AAA2B,SAA9C,CAAJ;AAAA,OADZ,CADiC;AAAA,KAApB,CAAjB;AAGCf,IAAAA,OAAO,CAACiC,cAAD,CAAP;AACA,GANE,CAAP;AAOC;;AAEL,SAAST,4BAAT,CAAsCJ,iBAAtC,EAAwDZ,MAAxD,EAA+D;AAC3D,MAAGY,iBAAiB,CAACU,MAAlB,IAA0B,CAA7B,EAA+B;AAAC,WAAO,IAAIC,OAAJ,CAAY,UAAS/B,OAAT,EAAiBgC,MAAjB,EAAwB;AAAChC,MAAAA,OAAO,CAACQ,MAAD,CAAP;AAAgB,KAArD,CAAP;AAA8D;;AAC9F,SAAO,IAAIuB,OAAJ,CAAY,UAAU/B,OAAV,EAAmBgC,MAAnB,EAA0B;AACzC,QAAIC,cAAc,GAAG,EAArB;AACA,QAAMC,QAAQ,GAAGd,iBAAiB,CAACN,GAAlB,CAAsB,UAAAwB,UAAU;AAAA,aAC7CC,kBAAkB,CAACD,UAAD,EAAY9B,MAAZ,CAAlB,CACCH,IADD,CACM,UAAAG,MAAM;AAAA,eAAIA,MAAM,CAACM,GAAP,CACZ,UAAAC,KAAK,EAAE;AAACkB,UAAAA,cAAc,CAACI,IAAf,CAAoBtB,KAApB;AAA2B,SADvB,CAAJ;AAAA,OADZ,CAD6C;AAAA,KAAhC,CAAjB;AAKAf,IAAAA,OAAO,CAACiC,cAAD,CAAP,CAPyC,CAQrC;AACA;AACA;AACA;AACH,GAZE,CAAP;AAcH;;AAED,SAASP,qBAAT,CAA+BL,GAA/B,EAAmCb,MAAnC,EAA0C;AACtC,SAAO,IAAIuB,OAAJ,CAAY,UAAU/B,OAAV,EAAmBgC,MAAnB,EAA0B;AACzC,QAAIC,cAAc,GAAG,EAArB;AACAzB,IAAAA,MAAM,CAACM,GAAP,CAAW,UAAAC,KAAK,EAAE;AACd,UAAGA,KAAK,CAACM,GAAN,GAAUA,GAAb,EAAiB;AACbY,QAAAA,cAAc,CAACI,IAAf,CAAoBtB,KAApB;AACH;AACJ,KAJD;AAKAf,IAAAA,OAAO,CAACiC,cAAD,CAAP;AACC,GARE,CAAP;AAUH,C,CAED;;;AACA,SAASG,iBAAT,CAA2BI,SAA3B,EAAsChC,MAAtC,EAA6C;AACzC,SAAO,IAAIuB,OAAJ,CAAY,UAAS/B,OAAT,EAAkBgC,MAAlB,EAAyB;AACxC,QAAIC,cAAc,GAAG,EAArB;AACAzB,IAAAA,MAAM,CAACM,GAAP,CAAY,UAAAC,KAAK,EAAG;AAChB,UAAGA,KAAK,CAAC0B,UAAN,KAAqBD,SAAxB,EAAkC;AAC9BxB,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAgB,QAAAA,cAAc,CAACI,IAAf,CAAoBtB,KAApB;AACH;AACJ,KALD;AAOCf,IAAAA,OAAO,CAACiC,cAAD,CAAP;AACJ,GAVM,CAAP;AAWH;;AAID,SAASM,kBAAT,CAA4BD,UAA5B,EAAwC9B,MAAxC,EAA+C;AAC3C,SAAO,IAAIuB,OAAJ,CAAY,UAAS/B,OAAT,EAAkBgC,MAAlB,EAAyB;AAC5C,QAAIC,cAAc,GAAG,EAArB;AAEAzB,IAAAA,MAAM,CAACM,GAAP,CAAY,UAAAC,KAAK,EAAG;AAChBA,MAAAA,KAAK,CAAC2B,WAAN,CAAkB5B,GAAlB,CAAsB,UAAA6B,WAAW,EAAI;AACjC,YAAGA,WAAW,IAAIL,UAAlB,EAA6B;AACzBtB,UAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAgB,UAAAA,cAAc,CAACI,IAAf,CAAoBtB,KAApB;AACH;AACJ,OALD;AAUH,KAXD;AAaCf,IAAAA,OAAO,CAACiC,cAAD,CAAP;AACJ,GAjBU,CAAP;AAmBH;;AAID,SAASJ,YAAT,CAAsBD,KAAtB,EAA6BpB,MAA7B,EAAoC;AAChC,SAAO,IAAIuB,OAAJ,CAAY,UAAS/B,OAAT,EAAkBgC,MAAlB,EAAyB;AACxC,QAAIC,cAAc,GAAG,EAArB;AACAzB,IAAAA,MAAM,CAACM,GAAP,CAAY,UAAAC,KAAK,EAAG;AAChB,UAAGA,KAAK,CAAC6B,IAAN,CAAWC,QAAX,CAAoBjB,KAApB,CAAH,EAA8B;AAC1BK,QAAAA,cAAc,CAACI,IAAf,CAAoBtB,KAApB;AACH;AACJ,KAJD;AAMCf,IAAAA,OAAO,CAACiC,cAAD,CAAP;AACJ,GATM,CAAP;AAUH,C,CAED","sourcesContent":["import {resolve} from \"react-resolve\"\r\nvar api = \"https://raw.githubusercontent.com/rrafols/mobile_test/master/data.json\";\r\n\r\nexport function fetchGnomes(){\r\n    return function(dispatch){\r\n        fetch(api)\r\n        .then(res => res.json())\r\n        .then(gnomes =>\r\n            dispatch({\r\n                type:\"FETCH_GNOMES\",\r\n                payload: gnomes.Brastlewark\r\n            }));\r\n    }\r\n}\r\n\r\nexport function getGnomeInfo(id){\r\n    return function(dispatch){\r\n        fetch(api)\r\n        .then(res => res.json())\r\n        .then(json => json.Brastlewark)\r\n        .then(gnomes=> gnomes.map((gnome) => {\r\n            if(gnome.id==id){\r\n                console.log(gnome);\r\n                dispatch({\r\n                    type:\"GET_GNOME\",\r\n                    payload: gnome\r\n                })\r\n                resolve()\r\n            }\r\n        }))\r\n    }\r\n}\r\n\r\n\r\nexport function fetchGnomesFilters(hairFilters,professionFilters,age,gnomes){\r\n    return function(dispatch){   \r\n        fetchGnomesHairFilters(hairFilters,gnomes).then(\r\n            gnomesf => {\r\n                fetchGnomesProfessionFilters(professionFilters, gnomesf).then(\r\n                    gnomesff=>{\r\n                        fetchGnomesAgeFilters(age,gnomesff).then(\r\n                            dispatch({\r\n                                type:\"FETCH_GNOMES_FILTERS\",\r\n                                payload: gnomesff\r\n                            })\r\n                        )\r\n\r\n                    }\r\n\r\n                    )\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport function search(input,gnomes){\r\n    return function(dispatch){  \r\n        console.log(input)\r\n        searchGnomes(input,gnomes).then(\r\n            gnomesf=>{\r\n                dispatch({\r\n                    type:\"FETCH_GNOMES_FILTERS\",\r\n                    payload: gnomesf\r\n                })\r\n            }\r\n        ) \r\n    }\r\n}\r\n\r\n\r\n\r\n//SEARCH FILTERS ACTIONS=================================================\r\n//Se puede aplicar mas de un filtro a la vez,\r\n//Por eso necesitamos aplicar estos filtros a la lista que tenemos en state de store\r\n//tambien ordenamos la lista que retornamos de los filtros, y no la lista original\r\nfunction fetchGnomesHairFilters(hairFilters,gnomes){  \r\n    if(hairFilters.length==0){return new Promise(function(resolve,reject){resolve(gnomes)})} \r\n    return new Promise(function (resolve, reject){ \r\n        var gnomesFiltered = [];        \r\n        const promises = hairFilters.map(hair=>\r\n            filterByHairColor(hair,gnomes)\r\n            .then(gnomes => gnomes.map(gnome=>{gnomesFiltered.push(gnome)})));\r\n         resolve(gnomesFiltered);\r\n        });\r\n    }\r\n\r\nfunction fetchGnomesProfessionFilters(professionFilters,gnomes){  \r\n    if(professionFilters.length==0){return new Promise(function(resolve,reject){resolve(gnomes)})}  \r\n    return new Promise(function (resolve, reject){  \r\n        var gnomesFiltered = [];        \r\n        const promises = professionFilters.map(profession=>\r\n            filterByProfession(profession,gnomes)\r\n            .then(gnomes => gnomes.map(\r\n                gnome=>{gnomesFiltered.push(gnome)}\r\n            )));\r\n        resolve(gnomesFiltered);\r\n            // dispatch({\r\n            //     type:\"FETCH_GNOMES\",\r\n            //     payload: gnomesFiltered\r\n            // })\r\n        });      \r\n    \r\n}\r\n\r\nfunction fetchGnomesAgeFilters(age,gnomes){  \r\n    return new Promise(function (resolve, reject){  \r\n        var gnomesFiltered = [];        \r\n        gnomes.map(gnome=>{\r\n            if(gnome.age>age){\r\n                gnomesFiltered.push(gnome)\r\n            }\r\n        })\r\n        resolve(gnomesFiltered);\r\n        });      \r\n    \r\n}\r\n\r\n//SEARCH FILTERS FUNCTIONS=================================================\r\nfunction filterByHairColor(hairColor, gnomes){\r\n    return new Promise(function(resolve, reject){\r\n        var gnomesFiltered = [];\r\n        gnomes.map((gnome =>{\r\n            if(gnome.hair_color === hairColor){\r\n                console.log(\"water\")\r\n                gnomesFiltered.push(gnome);\r\n            }\r\n        }));\r\n\r\n         resolve(gnomesFiltered);\r\n    });\r\n}\r\n\r\n\r\n\r\nfunction filterByProfession(profession, gnomes){\r\n    return new Promise(function(resolve, reject){\r\n    var gnomesFiltered = [];\r\n\r\n    gnomes.map((gnome =>{\r\n        gnome.professions.map(professionG => {\r\n            if(professionG == profession){\r\n                console.log(\"wind\")\r\n                gnomesFiltered.push(gnome);\r\n            }\r\n        }\r\n\r\n            )\r\n\r\n\r\n    }));\r\n\r\n     resolve(gnomesFiltered);\r\n});\r\n    \r\n}\r\n\r\n\r\n\r\nfunction searchGnomes(input, gnomes){\r\n    return new Promise(function(resolve, reject){\r\n        var gnomesFiltered = [];\r\n        gnomes.map((gnome =>{\r\n            if(gnome.name.includes(input)){\r\n                gnomesFiltered.push(gnome);\r\n            }\r\n        }));\r\n\r\n         resolve(gnomesFiltered);\r\n    });\r\n}\r\n\r\n//SEARCH SORT=============================================================================="]},"metadata":{},"sourceType":"module"}